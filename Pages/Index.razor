@page "/"

<h1>Welcome to my website!</h1>
<h2>I'm James.</h2>

<BECanvas Width="300" Height="400" @ref="_canvasReference" ></BECanvas>

@code {
    private WebGLContext _webGLContext;

    protected BECanvasComponent _canvasReference;

    //Vertex shader GLSL source code.
    private const string vsSource = "attribute vec4 aVertexPosition; uniform mat4 uModelViewMatrix; uniform mat4 uProjectionMatrix; void main() {gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;}";

    //Fragment shader GLSL source code.
    private const string fsSource = "void main() {gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._webGLContext = await this._canvasReference.CreateWebGLAsync();

        float[] vertices = {-0.5f, 0.5f, -0.5f, -0.5f, 0.0f, 0.5f};

        var vertexBuffer = await this._webGLContext.CreateBufferAsync();

        await this._webGLContext.BindBufferAsync(BufferType.ARRAY_BUFFER, vertexBuffer);

        await this._webGLContext.BufferDataAsync(BufferType.ARRAY_BUFFER, vertices, BufferUsageHint.STATIC_DRAW);

        await this._webGLContext.BindBufferAsync(BufferType.ARRAY_BUFFER, null);


        string vertCode = "attribute vec2 coordinates;" + "void main(void) {"
                            + " gl_Position = vec4(coordinates, 0.0, 1.0);" + "}";

        var vertShader = await this._webGLContext.CreateShaderAsync(ShaderType.VERTEX_SHADER);

        await this._webGLContext.ShaderSourceAsync(vertShader, vertCode);

        await this._webGLContext.CompileShaderAsync(vertShader);

        string fragCode = "void main(void) {" + "gl_FragColor = vec4(0.0, 0.0, 0.0, 0.1);" + "}";

        var fragShader = await this._webGLContext.CreateShaderAsync(ShaderType.FRAGMENT_SHADER);

        await this._webGLContext.ShaderSourceAsync(fragShader, fragCode);

        await this._webGLContext.CompileShaderAsync(fragShader);

        var shaderProgram = await this._webGLContext.CreateProgramAsync();

        await this._webGLContext.AttachShaderAsync(shaderProgram, vertShader);

        await this._webGLContext.AttachShaderAsync(shaderProgram, fragShader);

        await this._webGLContext.LinkProgramAsync(shaderProgram);

        await this._webGLContext.UseProgramAsync(shaderProgram);


        await this._webGLContext.BindBufferAsync(BufferType.ARRAY_BUFFER, vertexBuffer);

        var coord = (uint)await this._webGLContext.GetAttribLocationAsync(shaderProgram, "coordinates");

        await this._webGLContext.VertexAttribPointerAsync(coord, 2, DataType.FLOAT, false, 0, 0);

        await this._webGLContext.EnableVertexAttribArrayAsync(coord);


        await this._webGLContext.BeginBatchAsync();

        await this._webGLContext.ClearColorAsync(0, 0, 0, 1);

        await this._webGLContext.EnableAsync(EnableCap.DEPTH_TEST);

        await this._webGLContext.ClearAsync(BufferBits.COLOR_BUFFER_BIT);

        await this._webGLContext.ViewportAsync(0, 0, (int)_canvasReference.Width, (int)_canvasReference.Height);

        await this._webGLContext.DrawArraysAsync(Primitive.TRIANGLES, 0, 3);

        await this._webGLContext.EndBatchAsync();
    }
}